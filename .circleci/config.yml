version: 2.1

commands:
  destroy-environment:
    description: Destroy cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment: <<parameters.workflow_id>> "
            aws cloudformation delete-stack --region ${AWS_DEFAULT_REGION} --stack-name ${ENVIRONMENT_NAME}-eks-mgt-<<parameters.workflow_id>>
            aws cloudformation wait stack-delete-complete --region ${AWS_DEFAULT_REGION} --stack-name ${ENVIRONMENT_NAME}-eks-mgt-<<parameters.workflow_id>>
            aws cloudformation delete-stack --region ${AWS_DEFAULT_REGION} --stack-name ${ENVIRONMENT_NAME}-eks-nodegroup-<<parameters.workflow_id>>
            aws cloudformation wait stack-delete-complete --region ${AWS_DEFAULT_REGION} --stack-name ${ENVIRONMENT_NAME}-eks-nodegroup-<<parameters.workflow_id>>
            aws cloudformation delete-stack --region ${AWS_DEFAULT_REGION} --stack-name ${ENVIRONMENT_NAME}-eks-cluster-<<parameters.workflow_id>>
            aws cloudformation wait stack-delete-complete --region ${AWS_DEFAULT_REGION} --stack-name ${ENVIRONMENT_NAME}-eks-cluster-<<parameters.workflow_id>>
            aws cloudformation delete-stack --region ${AWS_DEFAULT_REGION} --stack-name ${ENVIRONMENT_NAME}-eks-network-<<parameters.workflow_id>>
            aws cloudformation wait stack-delete-complete --region ${AWS_DEFAULT_REGION} --stack-name ${ENVIRONMENT_NAME}-eks-network-<<parameters.workflow_id>>
jobs:
  test-build:
    docker:
      - image: python:3.7.3-stretch

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      # run build
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install

      # run lint
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  upload-docker:
    docker:
      - image: circleci/golang:1.15

    working_directory: ~/repo

    steps:
      - checkout

      - setup_remote_docker:
          version: 19.03.13

      - run:
          name: Build docker container
          command: |
            docker build --tag=$DOCKER_IMAGE_NAME .
            docker image ls

      - run:
          name: Upload Docker to Dockerhub
          command: |
            echo "Docker ID and Image: $DOCKER_IMAGE_NAME"
            docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
            docker tag $DOCKER_IMAGE_NAME $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:$CIRCLE_WORKFLOW_ID
            docker push $DOCKERHUB_USERNAME/$DOCKER_IMAGE_NAME:$CIRCLE_WORKFLOW_ID

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Ensure EKS network exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/network.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-network-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/parameters/network.json\
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure EKS Cluster exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/cluster.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-cluster-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/parameters/cluster.json \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --capabilities CAPABILITY_NAMED_IAM
          no_output_timeout: 15m
      - run:
          name: Ensure Nodegroup exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/nodegroup.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-nodegroup-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/parameters/nodegroup.json \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Ensure instances exists
          command: |
            aws cloudformation deploy \
              --template-file cloudformation/mgt.yml \
              --tags project=${ENVIRONMENT_NAME}-project \
              --stack-name "${ENVIRONMENT_NAME}-eks-mgt-${CIRCLE_WORKFLOW_ID:0:7}" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://cloudformation/parameters/mgt.json \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text >> outputs/check_deployed.txt
            cat outputs/check_deployed.txt
      - run:
          name: Extract the IPs of the instances for Ansible
          command: |
            aws ec2 describe-instances \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=${ENVIRONMENT_NAME}-mgt*" \
              --output text >> ansible/inventory.txt
            cat ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/outputs/check_deployed.txt
            - project/ansible/inventory.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["b2:37:70:80:0e:60:3f:59:31:ba:80:46:dd:3f:a6:d9"]
      - run:
          name: Install dependencies
          command: |
            apk add --update curl ansible zip unzip
            pip install awscli
      - run:
          name: Configure server
          command: |
            if grep -q "No changes to deploy" ~/outputs/check_deployed.txt
              then
                cat ~/ansible/inventory.txt
                echo "Our instances are already configured."
              else
                cd ansible
                cat inventory.txt
                ansible-playbook -i inventory.txt configure-server.yml -vvv
              fi
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  configure-cluster:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["b2:37:70:80:0e:60:3f:59:31:ba:80:46:dd:3f:a6:d9"]
      - run:
          name: Install dependencies
          command: |
            apk add --update curl ansible zip unzip
            pip install awscli
      - run:
          name: Configure server
          command: |
            if grep -q "No changes to deploy" ~/outputs/check_deployed.txt
              then
                cat ~/ansible/inventory.txt
                echo "Our instances are already configured."
              else
                cd ansible
                cat inventory.txt
                ansible-playbook -i inventory.txt configure-cluster.yml -vvv
              fi
      - run:
          name: Wait for LoadBalancer's domain to become reachable
          command: |
            if grep -q "No changes to deploy" ~/outputs/check_deployed.txt
              then
                cat ~/ansible/inventory.txt
                echo "Our instances are already configured."
              else
                cat ~/ansible/inventory.txt
                echo "Wait 60 seconds..."
                sleep 60
              fi
      - run:
          name: Display the LoadBalancer's DNS name
          command: |
            cd ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt save-elb-dns.yml -vvv
            cat ~/outputs/elb_dns.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/outputs/elb_dns.txt
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

  deploy-docker:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys:
          fingerprints: ["b2:37:70:80:0e:60:3f:59:31:ba:80:46:dd:3f:a6:d9"]
      - run:
          name: Install dependencies
          command: |
            apk add --update curl ansible zip unzip
            pip install awscli
      - run:
          name: Deploy newest Docker Image
          command: |
            cd ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-app.yml -vvv
          no_output_timeout: 2m
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
              echo "Remove old stacks and files: ${OldWorkflowID} "
              aws cloudformation delete-stack --region ${AWS_DEFAULT_REGION} --stack-name ${ENVIRONMENT_NAME}-eks-ec2-${OldWorkflowID}
              aws cloudformation wait stack-delete-complete --region ${AWS_DEFAULT_REGION} --stack-name ${ENVIRONMENT_NAME}-eks-mgt-${OldWorkflowID}
              aws cloudformation delete-stack --region ${AWS_DEFAULT_REGION} --stack-name ${ENVIRONMENT_NAME}-eks-nodegroup-${OldWorkflowID}
              aws cloudformation wait stack-delete-complete --region ${AWS_DEFAULT_REGION} --stack-name ${ENVIRONMENT_NAME}-eks-nodegroup-${OldWorkflowID}
              aws cloudformation delete-stack --region ${AWS_DEFAULT_REGION} --stack-name ${ENVIRONMENT_NAME}-eks-cluster-${OldWorkflowID}
              aws cloudformation wait stack-delete-complete --region ${AWS_DEFAULT_REGION} --stack-name ${ENVIRONMENT_NAME}-eks-cluster-${OldWorkflowID}
              aws cloudformation delete-stack --region ${AWS_DEFAULT_REGION} --stack-name ${ENVIRONMENT_NAME}-eks-network-${OldWorkflowID}
              aws cloudformation wait stack-delete-complete --region ${AWS_DEFAULT_REGION} --stack-name ${ENVIRONMENT_NAME}-eks-network-${OldWorkflowID}
            fi
      - run: yum -y install tar gzip
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
workflows:
  default:
    jobs:
      - test-build
      - upload-docker:
          requires: [test-build]
          filters:
            branches:
              only: [main]
      - deploy-infrastructure:
          requires: [upload-docker]
          filters:
            branches:
              only: [main]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
          filters:
            branches:
              only: [main]
      - configure-cluster:
          requires: [configure-infrastructure, upload-docker]
          filters:
            branches:
              only: [main]
      - deploy-docker:
          requires: [configure-cluster]
          filters:
            branches:
              only: [main]
      - cleanup:
          requires: [deploy-docker]
          filters:
            branches:
              only: [main]
